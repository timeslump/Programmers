/**+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 *    Copyright (c) 2020 by Seok Jin Lee, All rights reserved.
 *
 *    Programmers
 *
 *  title : 징검다리 건너기
 *
 *  Written by Lee, Seok Jin,
 *             School of Electrical and Electronics Engineering / Computer science
 *             Sungkyunkwan University.
 *
 *
 *  Written on August 16, 2020
 *  Modification History :
 *     1. Written by Seok Jin Lee on August 16, 2020
 *
 *  Compiler Used : MinGW Compiler
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
#include <string>
#include <vector>
#include <deque>
#include <bits/stdc++.h>
using namespace std;

/**
 * local Maximum 중에서 minimum 찾기 Slicing window 문제이다.
 *
 * Inputs :
 *        vector<int> stones : slicing 할 배열
 *        int k : window의 크기
 * Outputs :
 *        int answer : slicing한 window에서 maximum 중에 minimum이다.
 */
int solution(vector<int> stones, int k) {
    deque<int> dq;
    vector<int> v;
    int answer = INT_MAX;

    // 0 ~ k - 1 까지 첫번째 window를 만들어준다.
    for(int i = 0; i < k; i++){
        // 이 window 중 최댓값을 찾는 것이기 때문에 , 작은 값들은 제거
        while(!dq.empty() && stones[dq.back()] < stones[i])
            dq.pop_back();
        dq.push_back(i);
    }
    // window의 start index를 1 ~ size() - k 번까지 함
    for(int i = k; i < stones.size(); i++){
        // dq.front()는 local maximum이 들어있는 index이기 때문에 정답과 비교해서 min을 찾아줌
        answer = min(answer, stones[dq.front()]);

        // i - k 보다 작은 index는 window의 범위를 벗어나기 때문에 제거
        while(!dq.empty() && dq.front() <= i - k)
            dq.pop_front();
        // 이 window 중 최댓값을 찾는 것이기 때문에 , 작은 값들은 제거
        while(!dq.empty() && stones[dq.back()] < stones[i])
            dq.pop_back();
        dq.push_back(i);
    }
    
    // 마지막 window에 대해서도 비교해준다.
    answer = min(answer, stones[dq.front()]);

    return answer;
}
