/**+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 *    Copyright (c) 2020 by Seok Jin Lee, All rights reserved.
 *
 *    Programmers
 *
 *  title : 튜플
 *
 *  Written by Lee, Seok Jin,
 *             School of Electrical and Electronics Engineering / Computer science
 *             Sungkyunkwan University.
 *
 *
 *  Written on August 23, 2020
 *  Modification History :
 *     1. Written by Seok Jin Lee on August 23, 2020
 *
 *  Compiler Used : MinGW Compiler
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
#include<bits/stdc++.h>
using namespace std;
/**
 * 문자열 indexing과 정렬문제이다.
 *
 * Inputs :
 *        string s : 튜플의 부분집합들이 string 형태로 들어가 있다. 
 * Outputs :
 *        vector<int> answer : 하나의 튜플을 만들어야 한다. 
 */
bool clear[100001];
vector<vector<int>> tmp;

// sort 할 때 크기에 따라 정렬하기 위해서 cmp 함수를 만들어준다.
bool cmp(const vector<int> a, const vector<int> b){
    return a.size() < b.size();
}
vector<int> solution(string s) {
    vector<int> answer;
    bool check[1000001];
    tmp.resize(503);
    int i = 0;
    int idx = 0;
    //string의 종료까지 
    while(s.substr(i, 2) != "}}"){
        // 확인한 숫자이면 넘어간다.
        if(check[i]) {
            i++;
            continue;
        }
        int j = i;
        
        // 숫자가 나오면 어디까지인지 index확인 
        while(s[j] >= '0' && s[j] <= '9') {
            check[j] = true;
            j++;
        }
        // 만약 숫자가 있으면 stoi를 통하여 배열에 넣어준다. 
        if(i != j)
            tmp[idx].push_back(stoi(s.substr(i, j - i)));
        
        // 부분집합끼리 묶을것이기 때문에 부분집합마다 배열 하나씩 만들어준다.
        if(s.substr(i, 2) == "},")
            idx++;
        i++;
    }
    
    // 크기 순으로 정렬
    sort(tmp.begin(), tmp.end(), cmp);
    
    // main idea는 크기순으로 부분 tuple을 정렬하면 크기가 1일부터 
    // 존재하지 않았던 원소를 하나하나 추가시키면 된다. 
    for(auto v : tmp){
        for(auto w : answer)
            clear[w] = true;
        for(auto w : v){
            if(clear[w] == false)
                answer.push_back(w);
            clear[w] = false;
        }
    }
    return answer;
}
